// app/api/predictions/process-expired/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'

export async function POST(request: NextRequest) {
    try {
        console.log('üöÄ API: process-expired chamada')
        const supabase = createClient()

        // Verificar se o usu√°rio est√° autenticado
        const { data: authData, error: authError } = await supabase.auth.getUser()
        
        if (authError || !authData?.user) {
            console.log('‚ùå API: Usu√°rio n√£o autenticado')
            return NextResponse.json(
                { message: 'Usu√°rio n√£o autenticado' },
                { status: 401 }
            )
        }

        console.log('‚úÖ API: Usu√°rio autenticado:', authData.user.id)

        // Executar fun√ß√£o para processar previs√µes expiradas
        console.log('üìä API: Executando process_expired_predictions...')
        const { data: processedPredictions, error } = await supabase
            .rpc('process_expired_predictions')

        if (error) {
            console.error('‚ùå API: Erro ao processar previs√µes expiradas:', error)
            return NextResponse.json(
                { message: 'Erro ao processar previs√µes expiradas', error: error.message },
                { status: 500 }
            )
        }

        console.log('üìä API: Resultado da fun√ß√£o:', processedPredictions)

        return NextResponse.json({
            message: 'Previs√µes processadas com sucesso',
            processed: processedPredictions || [],
            count: processedPredictions?.length || 0
        })

    } catch (error) {
        console.error('üí• API: Erro interno:', error)
        return NextResponse.json(
            { message: 'Erro interno do servidor', error: error instanceof Error ? error.message : 'Erro desconhecido' },
            { status: 500 }
        )
    }
}

export async function GET(request: NextRequest) {
    try {
        const supabase = createClient()

        // Verificar se o usu√°rio est√° autenticado
        const { data: authData, error: authError } = await supabase.auth.getUser()
        
        if (authError || !authData?.user) {
            return NextResponse.json(
                { message: 'Usu√°rio n√£o autenticado' },
                { status: 401 }
            )
        }

        // Buscar previs√µes expiradas (s√≥ para visualiza√ß√£o)
        const { data: expiredPredictions, error } = await supabase
            .from('music_predictions')
            .select(`
                id,
                predicted_viral_date,
                status,
                tracks!inner (
                    track_title,
                    artist_name
                )
            `)
            .eq('status', 'pending')
            .lt('predicted_viral_date', new Date().toISOString())

        if (error) {
            console.error('Erro ao buscar previs√µes expiradas:', error)
            return NextResponse.json(
                { message: 'Erro ao buscar previs√µes expiradas' },
                { status: 500 }
            )
        }

        return NextResponse.json({
            expired_predictions: expiredPredictions || [],
            count: expiredPredictions?.length || 0
        })

    } catch (error) {
        console.error('Erro na API de visualiza√ß√£o:', error)
        return NextResponse.json(
            { message: 'Erro interno do servidor' },
            { status: 500 }
        )
    }
}